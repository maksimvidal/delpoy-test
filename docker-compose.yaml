services:
  sensor-data-producer:
      image: msilc/sensor-data-producer:latest
      ports:
      - "8080:8080"
      expose:
      - "8080"
      depends_on:
      - kafka
  sensor-data-consumer:
      image: msilc/sensor-data-consumer:latest
      ports:
      - "8081:8081"
      expose:
      - "8081"
      depends_on:
      - kafka
      - mongo
  unit-manager-service:
      image: msilc/unit-manager-service:latest
      ports:
      - "8082:8082"
      expose:
      - "8082"
      depends_on: 
      - postgres
  traffic-analyze-service:
    image: msilc/traffic-analyze-service:latest
    ports:
      - "8083:8083"
    expose:
      - "8083"
    depends_on: 
      - postgresdb
  postgres:
    image: postgres:13.3
    restart: always
    hostname: postgres
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: unitsinfo
    ports:
      - "5432:5432"
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    image: wurstmeister/zookeeper
    expose:
      - "2181"
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      # KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
      # KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      # KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      #KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      # KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      # KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
    depends_on:
      - zookeeper
    volumes:
      - ./:/etc/kafka  
  mongo:
    hostname: mongo
    image: mongo
    container_name: mongoDB
    restart: always
    ports:
      - 27017:27017
  postgresdb:
    image: postgres:13.3
    restart: always
    hostname: postgresdb
    container_name: postgresdb
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: traffic
      POSTGRES_PORT: 5433
    command: -p 5433
      